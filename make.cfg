#-----------------------------------------------------------------------------
# include file for each subdir Makefile
#-----------------------------------------------------------------------------

#=============================================================================
# libs, libpath, and incpath

# this needs to be defined by user, where this project is installed
POFP_DIR ?= $(HOME)/pcaster/projs/parallel_ofp

SRCDIR    ?= $(POFP_DIR)/src
COMMON_DIR ?= $(POFP_DIR)/common
ROOTDIR    ?= $(POFP_DIR)
BINDIR     ?= $(ROOTDIR)/bin
#BINDIR     ?= $(ROOTBINDIR)/$(OSLOWER)/$(BINSUBDIR)
OBJDIR 	   ?= $(ROOTDIR)/obj
OBJDIR_COMM ?= $(OBJDIR)/common
OBJDIR_STATICLIB ?= $(OBJDIR)/static_lib
LIBDIR     ?= $(ROOTDIR)/lib

#-----------------------------------------------------------------------------
# local src

VOLREN_DIR =  $(SRCDIR)/volren
NET_DIR = $(SRCDIR)/net
IO_DIR = $(SRCDIR)/io
PCASTER_DIR = $(SRCDIR)/pcaster

INCPATH = -I. -I$(COMMON_DIR) -I$(PCASTER_DIR) -I$(VOLREN_DIR) -I$(IO_DIR) -I$(NET_DIR) -I$(HOME)/include
LIBPATH = -L$(HOME)/lib


#-----------------------------------------------------------------------------
# basic libs

# all dynamic libraries needed
LIBS = -ljpeg -lpng -lm -lhdf5
#LIBS = -ljpeg -lpng -lm -lpthread -ldl -lX11 -lXext -lXrandr -lXrender #-lxcb -lXau 

INCPATH += $(shell sdl-config --cflags)
LIBS += $(shell sdl-config --libs) 

CXX  := mpicxx 
CC   := mpicc 
LINK := mpicxx -fPIC 

#-----------------------------------------------------------------------------
# check computer-specific settings

ifeq ($(spider),1)
	MPICHPATH = /scratch/packages/mpich2-1.1.1p1
	EAVIVPATH = /scratch/scale09/workspace
        GLEWPATH = /scratch/packages/glew
        LIBPATH += -L$(EAVIVPATH)/lib -L$(EAVIVPATH)/udt/Release -L$(EAVIVPATH)/eavivdatalib/Debug
        INCPATH += -I$(EAVIVPATH)/include -I$(EAVIVPATH)/udt -I$(EAVIVPATH)/eavivdatalib 
        LIBS += -lGL -lGLEW
        LIBS += -lboost_program_options -lboost_thread

else ifeq ($(lincoln),1)
	EAVIVPATH = /cfs/projects/eaviv/eaviv
	HDF5DIR = $(EAVIVPATH)
        GLEWPATH = $(EAVIVPATH)/glew
        LIBS += -lGL -lGLEW
        LIBS += -lboost_program_options -lboost_thread

else ifeq ($(lincoln),1)
	BOOSTPATH = $(TACC_BOOST_DIR)
	GLEWPATH = $(TACC_CUDASDK_DIR)/C/common #/opt/apps/cuda_SDK/3.1/C/common
	HDFPATH = /opt/apps/intel11_1/mvapich2_1_4/hdf5/1.8.3
	MPICHPATH = /opt/apps/intel11_1/mvapich2/1.4
	LIBS += -lGL $(GLEWPATH)/lib/linux/libGLEW_x86_64.a
        LIBS += -lboost_program_options -lboost_thread

else ifeq ($(jgemac),1)
	HDFPATH = /usr/local/hdf5/1.6.5
	LIBS += -framework OpenGL #-framework Cocoa #-framework GLUT
	LIBS += -lboost_program_options -lboost_thread

else ifeq ($(vizws07),1)
	HDFPATH = /usr/local/hdf5-1.6.8
	LIBS += -lGL -lGLEW
	LIBS += -lboost_program_options-mt -lboost_thread-mt
endif


LIBPATH += -L$(MPICHPATH)/lib -L$(HDFPATH)/lib
INCPATH += -I$(MPICHPATH)/include -I$(HDFPATH)/include


#-----------------------------------------------------------------------------
# check if useing CUDA
ifeq ($(cuda), 1)
	CUDA_INSTALL_PATH = /usr/local/cuda
	CUDA_UTIL_PATH = ../common/CUDA
	INCPATH += -I$(CUDA_INSTALL_PATH)/include -I$(CUDA_UTIL_PATH)
	LIBS += -L$(CUDA_INSTALL_PATH)/lib -lcudart
	NVCC := $(CUDA_INSTALL_PATH)/bin/nvcc 
endif


#=============================================================================
# flags

COMMONFLAGS = -Wall -DH5_USE_16_API -DMPICH_IGNORE_CXX_SEEK -m64#-pg
DATAFLAGS ?= -D_HDF5 -D_STREAMING -D_PARALLEL

ifeq ($(async), 1)
	ifeq ($(remote), 1)
		DATAFLAGS += __REMOTE_HDF5__
	else
		DATAFLAGS += __LOCAL_HDF5__
	endif

	LIBS += -ludt -lxmlrpc++ -llog4cxx -lxmlrpc -lxmlrpc_xmlparse -lxmlrpc_xmltok -lxmlrpc_util -leavivdatalib
endif

#-----------------------------------------------------------------------------
# Debug/release configuration
ifeq ($(dbg),1)
	COMMONFLAGS += -g
	NVCCFLAGS   += -D_DEBUG
	CXXFLAGS    += -D_DEBUG
	CFLAGS      += -D_DEBUG
	BINSUBDIR   := debug
	LIBSUFFIX   := D
	ifeq ($(ef), 1)
		LIBS += -lefence
	endif
else 
	COMMONFLAGS += -O2 
	BINSUBDIR   := release
	LIBSUFFIX   :=
	NVCCFLAGS   += --compiler-options -fno-strict-aliasing
	CXXFLAGS    += -fno-strict-aliasing
	CFLAGS      += -fno-strict-aliasing
endif

# Add common flags
NVCCFLAGS += $(COMMONFLAGS) $(DATAFLAGS)
CXXFLAGS  += $(COMMONFLAGS) $(DATAFLAGS)
CFLAGS    += $(COMMONFLAGS) $(DATAFLAGS)


#=============================================================================
# check if verbose 
ifeq ($(verbose), 1)
	VERBOSE :=
else
	VERBOSE := @
endif


#=============================================================================
# objects

# 	STATICLIBS += $(OBJDIR_STATICLIB)/libhdf5.a \
# 		$(OBJDIR_STATICLIB)/libSDLmain.a \
# 		$(OBJDIR_STATICLIB)/libSDL.a \
# 		$(OBJDIR_STATICLIB)/libboost_program_options.a \
# 		$(OBJDIR_STATICLIB)/libGLEW.a

COMM_OBJS = $(OBJDIR_COMM)/glheaders.o \
	$(OBJDIR_COMM)/pmisc.o \
	$(OBJDIR_COMM)/draw_routines.o \
	$(OBJDIR_COMM)/shader.o \
	$(OBJDIR_COMM)/imgfile.o \
	$(OBJDIR_COMM)/texture.o \
	$(OBJDIR_COMM)/fbo.o \
	$(OBJDIR_COMM)/buffer_object.o \
	$(OBJDIR_COMM)/vector_algebra.o




VOLREN_OBJS = $(OBJDIR)/nodeDimension.o \
	$(OBJDIR)/nodeDatabrick.o \
	$(OBJDIR)/data_hierarchy.o \
	$(OBJDIR)/nodeDimension.o \
	$(OBJDIR)/nodeRectile.o \
	$(OBJDIR)/tiled_display.o \
	$(OBJDIR)/tile.o \
	$(OBJDIR)/transferFunc.o \
	$(OBJDIR)/ray_caster.o \
	$(OBJDIR)/read_datafile.o \
	$(OBJDIR)/dataloader.o \
	$(OBJDIR)/volrender.o \

ifeq ($(async), 1)
	VOLREN_OBJS += $(OBJDIR)/async_dataloader.o
endif


NET_OBJS = $(OBJDIR)/socket_data_mover.o \
	$(OBJDIR)/tcpudpserver.o \
	$(OBJDIR)/tcpudpclient.o \
	$(OBJDIR)/messageSocket.o \
	$(OBJDIR)/vsocket.o 



IO_OBJS = $(OBJDIR)/GL_Application.o \
	$(OBJDIR)/gl_io.o \
	$(OBJDIR)/transform.o \
	$(OBJDIR)/camera.o \
	$(OBJDIR)/event_relayer.o \
	$(OBJDIR)/image_streamer.o \
	$(OBJDIR)/scene_manager.o \
	$(OBJDIR)/image_streamer.o \
	$(OBJDIR)/frustumCull.o \
	$(OBJDIR)/renderscreen.o \
	$(OBJDIR)/Timer.o \
	$(OBJDIR)/log_timer.o \
	$(OBJDIR)/onitcs.o \
	$(OBJDIR)/pcaster_options.o 


UTIL_OBJS = $(VOLREN_OBJS) \
	$(NET_OBJS) \
	$(IO_OBJS)

PCASTER_OBJS = $(OBJDIR)/pcaster.o \
	$(OBJDIR)/inplace_pcaster.o \
	$(OBJDIR)/scanline.o \
	$(OBJDIR)/footprint.o \
	$(OBJDIR)/segment_polygon.o \
	$(OBJDIR)/overlap.o \
	$(OBJDIR)/overlap_footprint.o \
	$(OBJDIR)/pixel_exchanger.o \
	$(OBJDIR)/pixel_compositor.o \
	$(OBJDIR)/image_fragment.o \
	$(OBJDIR)/imagefragment_tile.o \
	$(OBJDIR)/image_exchanger.o \


RENDER_OBJS = $(OBJDIR)/main_sdl_render.o \
	$(UTIL_OBJS)

VIEWER_OBJS = $(OBJDIR)/main_sdl_viewer.o \
	$(OBJDIR)/viewer.o \
	$(UTIL_OBJS)

SD_RENDER_OBJS = $(OBJDIR)/main_sdl_sdrender.o \
	$(OBJDIR)/standalone_render.o \
	$(UTIL_OBJS)


PCASTER_ONSITE_OBJS = $(OBJDIR)/main_sdl_pcaster.o \
        $(PCASTER_OBJS) \
	$(UTIL_OBJS)

PCASTER_REMOTE_OBJS = $(OBJDIR)/main_sdl_pcaster_remote.o \
                    $(PCASTER_OBJS) \
                    $(UTIL_OBJS)

#=============================================================================
# rules



all: makedirectories $(TARGET)
	@echo "executable is $(TARGET)"


LINKCMD = $(LINK) $(CXXFLAGS) # -o $@
LINKOBJS = $(STATICLIBS) $(LIBPATH) $(LIBS)

$(OBJDIR)/%.o:%.cpp
	$(CXX) $(CXXFLAGS) $(INCPATH) -o $@ -c $<

$(OBJDIR_COMM)/%.o:$(COMMON_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(INCPATH) -o $@ -c $<

$(OBJDIR)/%.o:$(VOLREN_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(INCPATH) -o $@ -c $<

$(OBJDIR)/%.o:$(NET_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(INCPATH) -o $@ -c $<

$(OBJDIR)/%.o:$(IO_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(INCPATH) -o $@ -c $<

$(OBJDIR)/%.o:$(PCASTER_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(INCPATH) -o $@ -c $<

%.o:%.cpp
	$(CXX) $(CXXFLAGS) $(INCPATH) -o $@ -c $<

%.o:%.c
	$(VERBOSE)$(CC) $(CFLAGS) $(INCPATH) -o $@ -c $<

%.o:%.cu
	$(VERBOSE)$(NVCC) $(NVCCFLAGS) $(SMVERSIONFLAGS) -o $@ -c $<

makedirectories:
	@mkdir -p $(OBJDIR)
	@mkdir -p $(OBJDIR_COMM)

$(LIBDIR)/libpcaster.a:$(UTIL_OBJS)
	ar cr $@ $^

# this is how subdir make its target
# by defining $(TARGET) and $(TARGET_OBJS)

$(TARGET): $(COMM_OBJS) $(TARGET_OBJS)
	$(VERBOSE)$(LINKCMD) -o $@ $^ $(LINKOBJS)


clobber: 
	rm -f *.o $(COMM_OBJS) $(OBJDIR)/*.o  $(TARGET)

clean:
	rm -f *.o $(OBJDIR)/*.o  $(TARGET)

clear:
	rm -f *.o $(TARGET)
